knitr::opts_chunk$set(echo = TRUE)
#A选项
semantics = c(7,8,6,9)
graphics = c(7,8,10,9,8)
s_mean = mean(semantics)
s_median = median(semantics)
print(s_mean == s_median)
#B选项
g_mean = mean(graphics)
g_median = median(graphics)
print(g_mean < g_median)
# 按照ppt的计算方法
s_number = length(semantics)
g_number = length(graphics)
w_mean1 = (sum(semantics)+sum(graphics))/(s_number+g_number)
# 直接进行计算
w_mean2 = mean(c(semantics,graphics))
#A选项 因为中位数只和数字的位置有关，因此极端值可能不会对中位数产生比较大的影响，中位数适合用于描述样本存在极端值的情况
#C选项 可以看下下面的例子
sample_values = c(1,2.2,3.2,4)
sample_mean = mean(sample_values)
sample_median = median(sample_values)
# BD选项 可以考虑对称的双峰分布
#A选项 方差和标准差以及全距描述的是数据的波动情况及变异性(variability),而平均数中位数众数描述的是数据的集中趋势(central tendency)
#B选项 如果一组数据方差更大，说明数据波动性越大，因此更有可能抽到极端值
#C选项 可以看下面的几个反例
ss_compulation = function(data){
ss = var(data)*(length(data-1))
return(ss)
}
raw_data = c(1,2,3)
new_data = c(1,2,3,2)
raw_ss = ss_compulation(raw_data)
new_ss = ss_compulation(new_data)
#D选项 其均值为17，标准差为8
#A选项 方差和标准差以及全距描述的是数据的波动情况及变异性(variability),而平均数中位数众数描述的是数据的集中趋势(central tendency)
#B选项 如果一组数据方差更大，说明数据波动性越大，因此更有可能抽到极端值
#C选项 可以看下面的几个反例
ss_compulation = function(data){
ss = var(data)*(length(data-1))
return(ss)
}
raw_data = c(1,2,3)
new_data = c(1,2,3,2)
raw_ss = ss_compulation(raw_data)
new_ss = ss_compulation(new_data)
#D选项 其均值为17，标准差为8
knitr::opts_chunk$set(echo = TRUE)
b = c(1,2,4)
mean(b)
# 简单的赋值
a <- 6
b = c(1,2,4)
#创建一个向量
array1 = c(1,2,3,4,5) #使用c()函数创建一个向量，也可以使用seq()函数生成
#向量的计算：支持标量计算
#在这里，直接对array1进行运算，比如我们想要将array1中的每一个值变为原来的2倍，我们可以这样做:
array2 = 2*array1
#同样，我们可以对array2进行乘方的运算
array3 = array1^2
array2
#向量的切片与提取
a = c(10, 20, 30, 40, 50)
a[2]#取出向量的第二项，注意r语言从1开始
a[c(1, 3, 5)] # 取出第 1, 3, 5 项
list_data <- list(c("Google","Runoob","Taobao"),
1,list("runoob",12.3))           #使用list函数创建一个列表
View(list_data)
names(list_data) <- c("Sites", "Numbers", "Lists") #为list设置名字
list_data[1]     #根据位置进行索引
list_data$Sites  #根据名字进行索引
table = data.frame(姓名 = c("张三", "李四","王五"),工号 = c("001","002","003"),月薪 = c(1000, 2000,3000))
#使用data.frame函数创建一个dataframe
table
#不同行列的提取
table$姓名 #使用$列名提取一列
#提取多行
table[1:2,]
#提取多行多列
table[1:2,2:3]
#summary函数可以对不同列进行描述性统计
summary(table)
mycolors_raw = c('red','blue','green','green')
mycolors <- factor(mycolors_raw) #使用factor函数生成因子
mycolors
factor(mycolors_raw, levels = c('red','green','blue'),labels =
c('R','G','B'))  #使用labels参数为每个因子水平添加标签
table(mycolors)
#下面两个函数都可以对mycolors这一个factor描述不同类别的占比
summary(mycolors)
setwd("~/课程资源/心统材料/心统上机/2023Fall/20231012")
library(readxl)
data <- read_excel('hw1_data.xlsx')
score <- data$score
(rank_score <- cut(score,
breaks = c(0,60,72,85,100),
labels = c("F","C","B","A"),
right = TRUE,
ordered_result = TRUE)) #使用ordered_result参数为因子设置为顺序型变量
(nums = table(rank_score))
prop.table(table(rank_score))
# 不带参数名
new.function(5,3,11)
new.function <- function(a,b,c) {
result <- a * b + c
return(result)
}
# 不带参数名
new.function(5,3,11)
# 带参数名
new.function(a = 11, b = 5, c = 3)
new.function <- function(a,b,c) {
result <- a * b + c
return(result)
}
# 不带参数名
new.function(5,3,11)
# 带参数名
new.function(a = 11, b = 5, c = 3)
new.function <- function(a,b,c) {
result <- a * b + c
return(result)
}
# 不带参数名
new.function(5,3,11)
# 带参数名
new.function(a = 11, b = 5, c = 3)
# 有关= 和 <- 之间的区别，请看下面的例子
?mean
rm(ls())
rm(list = ls())
# 有关= 和 <- 之间的区别，请看下面的例子
?mean
e <- mean(x = c(1,2,3))
f <- mean(x <- c(1,2,3))
library(readxl)  #这里注意library每次在文档开头都需要调用，但是install.packages只需要在console运行一次
data <- read_excel('hw1_data.xlsx')
#推荐使用read_excel函数，使用read_xlsx函数的话可能会出现rjava的问题
data # 是一个数据框
score <- data$score #这个才是一个变量，使用$符号可以提取dataframe中的列
max(score) #最大值
min(score) #最小值
range(score) #最大值和最小值
diff(range(score)) #全距
quantile(score,0.75) - quantile(score,0.25) #按照定义计算四分位距
IQR(score) #四分位距离interquantile range
(var_s <- var(score)) #样本方差
sd(score) #样本标准差
summary(score)
quantile(score)
help(pie)
# 添加颜色样本标注
legend("topright", names, cex=0.8, fill=cols)
help(pie)
# 数据准备
info = c(1, 2, 4, 8)
# 命名
names = c("Google", "Runoob", "Taobao", "Weibo")
# 涂色（可选）
cols = c("#ED1C24","#22B14C","#FFC90E","#3f48CC")
# 计算百分比
piepercent = paste(round(100*info/sum(info)), "%")
# 绘图
pie(info, labels=piepercent, main = "网站分析", col=cols)
# 添加颜色样本标注
legend("topright", names, cex=0.8, fill=cols)
help(hist)
mybreaks = seq(from = 30, to = 100, by = 5)
hist(score,
breaks = mybreaks,
col = rainbow(40),
freq = TRUE,
right = TRUE, #很重要的参数
main = '分数的分布',
xlab = '分数',
ylab = '频数',
labels = TRUE)
